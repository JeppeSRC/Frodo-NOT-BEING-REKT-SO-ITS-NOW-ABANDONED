#pragma once

#include <fd.h>
#define DIRECTINPUT_VERSION 0x0800
#include <dinput.h>
#include <util/map.h>

#define BIT(x) (1 << (x - 1))

#define SET_BYTE(x, off) ((x & 0xFF) << (off << 3))
#define GET_BYTE(x, off) ((x >> (off << 3)) & 0xFF)
#define MAKE_KEY(altgr, alt, shift, org) (SET_BYTE(altgr, 3) | SET_BYTE(alt, 2) | SET_BYTE(shift, 1) | SET_BYTE(org, 0))
#define GET_ORG(x) GET_BYTE(x, 0)
#define GET_SHIFT(x) GET_BYTE(x, 1)
#define GET_ALT(x) GET_BYTE(x, 2)
#define GET_ALTGR(x) GET_BYTE(x, 3)

namespace FD {

enum FD_KEY {

	FD_KEY_ESCAPE = DIK_ESCAPE,
	FD_KEY_1 = DIK_1,
	FD_KEY_2 = DIK_2,
	FD_KEY_3 = DIK_3,
	FD_KEY_4 = DIK_4,
	FD_KEY_5 = DIK_5,
	FD_KEY_6 = DIK_6,
	FD_KEY_7 = DIK_7,
	FD_KEY_8 = DIK_8,
	FD_KEY_9 = DIK_9,
	FD_KEY_0 = DIK_0,
	FD_KEY_MINUS = DIK_MINUS,
	FD_KEY_EQUALS = DIK_EQUALS,
	FD_KEY_BACK = DIK_BACK,
	FD_KEY_TAB = DIK_TAB,
	FD_KEY_Q = DIK_Q,
	FD_KEY_W = DIK_W,
	FD_KEY_E = DIK_E,
	FD_KEY_R = DIK_R,
	FD_KEY_T = DIK_T,
	FD_KEY_Y = DIK_Y,
	FD_KEY_U = DIK_U,
	FD_KEY_I = DIK_I,
	FD_KEY_O = DIK_O,
	FD_KEY_P = DIK_P,
	FD_KEY_LBRACKET = DIK_LBRACKET,
	FD_KEY_RBRACKET = DIK_RBRACKET,
	FD_KEY_RETURN = DIK_RETURN,
	FD_KEY_LCONTROL = DIK_LCONTROL,
	FD_KEY_A = DIK_A,
	FD_KEY_S = DIK_S,
	FD_KEY_D = DIK_D,
	FD_KEY_F = DIK_F,
	FD_KEY_G = DIK_G,
	FD_KEY_H = DIK_H,
	FD_KEY_J = DIK_J,
	FD_KEY_K = DIK_K,
	FD_KEY_L = DIK_L,
	FD_KEY_SEMICOLON = DIK_SEMICOLON,
	FD_KEY_APOSTROPHE = DIK_APOSTROPHE,
	FD_KEY_GRAVE = DIK_GRAVE,
	FD_KEY_LSHIFT = DIK_LSHIFT,
	FD_KEY_BACKSLASH = DIK_BACKSLASH,
	FD_KEY_Z = DIK_Z,
	FD_KEY_X = DIK_X,
	FD_KEY_C = DIK_C,
	FD_KEY_V = DIK_V,
	FD_KEY_B = DIK_B,
	FD_KEY_N = DIK_N,
	FD_KEY_M = DIK_M,
	FD_KEY_COMMA = DIK_COMMA,
	FD_KEY_PERIOD = DIK_PERIOD,
	FD_KEY_SLASH = DIK_SLASH,
	FD_KEY_RSHIFT = DIK_RSHIFT,
	FD_KEY_MULTIPLY = DIK_MULTIPLY,
	FD_KEY_LMENU = DIK_LMENU,
	FD_KEY_SPACE = DIK_SPACE,
	FD_KEY_CAPITAL = DIK_CAPITAL,
	FD_KEY_F1 = DIK_F1,
	FD_KEY_F2 = DIK_F2,
	FD_KEY_F3 = DIK_F3,
	FD_KEY_F4 = DIK_F4,
	FD_KEY_F5 = DIK_F5,
	FD_KEY_F6 = DIK_F6,
	FD_KEY_F7 = DIK_F7,
	FD_KEY_F8 = DIK_F8,
	FD_KEY_F9 = DIK_F9,
	FD_KEY_F10 = DIK_F10,
	FD_KEY_NUMLOCK = DIK_NUMLOCK,
	FD_KEY_SCROLL = DIK_SCROLL,
	FD_KEY_NUMPAD7 = DIK_NUMPAD7,
	FD_KEY_NUMPAD8 = DIK_NUMPAD8,
	FD_KEY_NUMPAD9 = DIK_NUMPAD9,
	FD_KEY_SUBTRACT = DIK_SUBTRACT,
	FD_KEY_NUMPAD4 = DIK_NUMPAD4,
	FD_KEY_NUMPAD5 = DIK_NUMPAD5,
	FD_KEY_NUMPAD6 = DIK_NUMPAD6,
	FD_KEY_ADD = DIK_ADD,
	FD_KEY_NUMPAD1 = DIK_NUMPAD1,
	FD_KEY_NUMPAD2 = DIK_NUMPAD2,
	FD_KEY_NUMPAD3 = DIK_NUMPAD3,
	FD_KEY_NUMPAD0 = DIK_NUMPAD0,
	FD_KEY_DECIMAL = DIK_DECIMAL,
	FD_KEY_OEM_102 = DIK_OEM_102,
	FD_KEY_F11 = DIK_F11,
	FD_KEY_F12 = DIK_F12,
	FD_KEY_F13 = DIK_F13,
	FD_KEY_F14 = DIK_F14,
	FD_KEY_F15 = DIK_F15,
	FD_KEY_KANA = DIK_KANA,
	FD_KEY_ABNT_C1 = DIK_ABNT_C1,
	FD_KEY_CONVERT = DIK_CONVERT,
	FD_KEY_NOCONVERT = DIK_NOCONVERT,
	FD_KEY_YEN = DIK_YEN,
	FD_KEY_ABNT_C2 = DIK_ABNT_C2,
	FD_KEY_NUMPADEQUALS = DIK_NUMPADEQUALS,
	FD_KEY_PREVTRACK = DIK_PREVTRACK,
	FD_KEY_AT = DIK_AT,
	FD_KEY_COLON = DIK_COLON,
	FD_KEY_UNDERLINE = DIK_UNDERLINE,
	FD_KEY_KANJI = DIK_KANJI,
	FD_KEY_STOP = DIK_STOP,
	FD_KEY_AX = DIK_AX,
	FD_KEY_UNLABELED = DIK_UNLABELED,
	FD_KEY_NEXTTRACK = DIK_NEXTTRACK,
	FD_KEY_NUMPADENTER = DIK_NUMPADENTER,
	FD_KEY_RCONTROL = DIK_RCONTROL,
	FD_KEY_MUTE = DIK_MUTE,
	FD_KEY_CALCULATOR = DIK_CALCULATOR,
	FD_KEY_PLAYPAUSE = DIK_PLAYPAUSE,
	FD_KEY_MEDIASTOP = DIK_MEDIASTOP,
	FD_KEY_VOLUMEDOWN = DIK_VOLUMEDOWN,
	FD_KEY_VOLUMEUP = DIK_VOLUMEUP,
	FD_KEY_WEBHOME = DIK_WEBHOME,
	FD_KEY_NUMPADCOMMA = DIK_NUMPADCOMMA,
	FD_KEY_DIVIDE = DIK_DIVIDE,
	FD_KEY_SYSRQ = DIK_SYSRQ,
	FD_KEY_RMENU = DIK_RMENU,
	FD_KEY_PAUSE = DIK_PAUSE,
	FD_KEY_HOME = DIK_HOME,
	FD_KEY_UP = DIK_UP,
	FD_KEY_PRIOR = DIK_PRIOR,
	FD_KEY_LEFT = DIK_LEFT,
	FD_KEY_RIGHT = DIK_RIGHT,
	FD_KEY_END = DIK_END,
	FD_KEY_DOWN = DIK_DOWN,
	FD_KEY_NEXT = DIK_NEXT,
	FD_KEY_INSERT = DIK_INSERT,
	FD_KEY_DELETE = DIK_DELETE,
	FD_KEY_LWIN = DIK_LWIN,
	FD_KEY_RWIN = DIK_RWIN,
	FD_KEY_APPS = DIK_APPS,
	FD_KEY_POWER = DIK_POWER,
	FD_KEY_SLEEP = DIK_SLEEP,
	FD_KEY_WAKE = DIK_WAKE,
	FD_KEY_WEBSEARCH = DIK_WEBSEARCH,
	FD_KEY_WEBFAVORITES = DIK_WEBFAVORITES,
	FD_KEY_WEBREFRESH = DIK_WEBREFRESH,
	FD_KEY_WEBSTOP = DIK_WEBSTOP,
	FD_KEY_WEBFORWARD = DIK_WEBFORWARD,
	FD_KEY_WEBBACK = DIK_WEBBACK,
	FD_KEY_MYCOMPUTER = DIK_MYCOMPUTER,
	FD_KEY_MAIL = DIK_MAIL,
	FD_KEY_MEDIASELECT = DIK_MEDIASELECT
};

enum FD_MODIFIER {
	FD_MODIFIER_LSHIFT = 0x01,
	FD_MODIFIER_RSHIFT = 0x02,
	FD_MODIFIER_LCONTROL = 0x04,
	FD_MODIFIER_RCONTROL = 0x08,
	FD_MODIFIER_LALT = 0x10,
	FD_MODIFIER_RALT = 0x20,

	FD_MODIFIER_ALTGR = BIT(29),
	FD_MODIFIER_SHIFT = BIT(30),
	FD_MODIFIER_CONTROL = BIT(31),
	FD_MODIFIER_ALT = BIT(32)
};

enum FD_KEYMAP_LAYOUT {
	FD_KEYMAP_LAYOUT_SWE,
	FD_KEYMAP_LAYOUT_US,
	FD_KEYMAP_LAYOUT_DEFAULT = FD_KEYMAP_LAYOUT_US,
};

class FDAPI KeyMap {
private:
	static FD_KEYMAP_LAYOUT layout;

	static Map<byte, uint64> map;

	static void InitializeUS();
	static void InitializeSWE();

public:
	static void Init(FD_KEYMAP_LAYOUT layout);

	static uint32 GetChar(FD_KEY key, uint32 modifiers);

	inline static FD_KEYMAP_LAYOUT GetLayout() { return layout; }
};


//uint64 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
//		                                       altgr     alt     shift    org 

}