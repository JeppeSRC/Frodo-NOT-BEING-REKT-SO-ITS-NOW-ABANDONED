#pragma once

namespace FD {

enum FD_EVENT_ACTION {
	FD_EVENT_ACTION_UNKNOWN,

	FD_PRESSED,
	FD_RELEASED,
	FD_HOLD,

	FD_FOCUS_GAINED,
	FD_FOCUS_LOST,
	FD_MINIMIZED,
	FD_MAXIMIZED,

	FD_RELATIVE,
	FD_ABSOLUTE
};

enum FD_KEY_MODIFIERS {
	FD_KEY_SHIFT,
	FD_KEY_CAPS,
	FD_KEY_CTRL,
	FD_KEY_ALT
};

enum FD_EVENT_TYPE {
	FD_EVENT_TYPE_UNKNOWN,
	FD_MOUSE_EVENT,
	FD_MOUSE_ACTION_MOVE,
	FD_MOUSE_ACTION_MOVE_ABSOLUTE,
	FD_MOUSE_ACTION_MOVE_RELATIVE,
	FD_MOUSE_ACTION_BUTTON_PRESSED,
	FD_MOUSE_ACTION_BUTTON_RELEASED,
	FD_MOUSE_ACTION_BUTTON_HOLD,

	FD_WINDOW_EVENT,
	FD_WINDOW_ACTION_RESIZE,
	FD_WINDOW_ACTION_MOVE,
	FD_WINDOW_STATE_MINIMIZED,
	FD_WINDOW_STATE_MAXIMIZED,
	FD_WINDOW_STATE_FOCUS_GAINED,
	FD_WINDOW_STATE_FOCUS_LOST,

	FD_KEYBOARD_EVENT,
	FD_KEYBOARD_ACTION_KEY_PRESSED,
	FD_KEYBOARD_ACTION_KEY_RELEASED,
	FD_KEYBOARD_ACTION_KEY_HOLD
};

class Event {
protected:
	FD_EVENT_TYPE type;

public:
	Event(FD_EVENT_TYPE type) { this->type = type; }

	inline FD_EVENT_TYPE GetEventType() const { return type; }
};

}